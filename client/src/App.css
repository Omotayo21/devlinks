const platforms = [
  {
    name: "GitHub",
    baseUrl: "https://github.com/",
    logo: "/github.svg",
    color: "bg-black",
  },
  {
    name: "LinkedIn",
    baseUrl: "https://linkedin.com/in/",
    logo: "/linkedin.svg",
    color: "bg-blue-700",
  },
  {
    name: "Email",
    baseUrl: "mailto:",
    logo: "/email.svg",
    color: "bg-red-500",
  },
  {
    name: "Twitter",
    baseUrl: "https://twitter.com/",
    logo: "/twitter.svg",
    color: "bg-sky-500",
  },
  {
    name: "Facebook",
    baseUrl: "https://facebook.com/",
    logo: "/facebook.svg",
    color: "bg-blue-600",
  },
  {
    name: "Instagram",
    baseUrl: "https://instagram.com/",
    logo: "/instagram.svg",
    color : "bg-pink-600",
  },
  {
    name: "Hashnode",
    baseUrl: "https://hashnode.com/@/",
    logo: "/hashnode.svg",
    color: "bg-blue-600",
  },
];

const LinkForm = () => {
  const [links, setLinks] = useState([
    { platform: "", baseUrl: "", username: "", showDropdown: false, logo: "" },
  ]);

  const handleAddLink = () => {
    setLinks([
      ...links,
      {
        platform: "",
        baseUrl: "",
        username: "",
        showDropdown: false,
        logo: "",
      },
    ]);
  };

  const handleRemoveLink = (index) => {
    setLinks(links.filter((_, i) => i !== index));
  };

  const toggleDropdown = (index) => {
    const updated = [...links];
    updated[index].showDropdown = !updated[index].showDropdown;
    setLinks(updated);
  };

  const handlePlatformSelect = (index, platform) => {
    const updated = [...links];
    updated[index].platform = platform.name;
    updated[index].baseUrl = platform.baseUrl;
    updated[index].logo = platform.logo;
    updated[index].showDropdown = false;
    updated[index].username = "";
    setLinks(updated);
  };

  const handleUsernameChange = (index, value) => {
    const updated = [...links];
    updated[index].username = value;
    setLinks(updated);
  };

  return (
    <div className="bg-white w-[39rem] p-8 flex flex-col gap-y-4">
      <h2 className="font-bold text-xl">Customise your links</h2>
      <p className="text-gray-500">
        Add/edit/remove links below and then share all your profiles with the
        world!
      </p>

      <button
        onClick={handleAddLink}
        className="text-center cursor-pointer border-2 hover:bg-[#633cff] hover:text-white border-[#633cff] flex flex-row justify-center items-center gap-[0.5rem] rounded-[0.8rem] py-2 text-[1.1rem] font-semibold leading-[2.4rem] text-[#633cff] mobile:px-[1.6rem]"
      >
        + Add link
      </button>

      {links.map((link, index) => (
        <div
          key={index}
          className="w-[34rem] bg-gray-100 rounded-lg p-4 flex flex-col gap-4 relative"
        >
          <div className="flex justify-between items-center">
            <p className="font-medium">Link {index + 1}</p>
            <button
              onClick={() => handleRemoveLink(index)}
              className="text-red-500 hover:underline"
            >
              Remove
            </button>
          </div>

          {/* Platform Select Dropdown */}
          <div className="relative">
            <label className="block text-sm text-gray-700 mb-2">Platform</label>
            <div
              onClick={() => toggleDropdown(index)}
              className="bg-gray-50 border cursor-pointer rounded-lg p-2.5 flex justify-between items-center"
            >
              <div className="flex items-center gap-2">
                {link.logo && (
                  <img
                    src={link.logo}
                    alt={link.platform}
                    className="w-5 h-5"
                  />
                )}
                <p className="capitalize">
                  {link.platform || "Select platform"}
                </p>
              </div>
              <span className="ml-2">â–¼</span>
            </div>

            {link.showDropdown && (
              <div className="absolute z-10 bg-white border rounded-lg mt-1 w-full shadow">
                {platforms.map((plat) => (
                  <div
                    key={plat.name}
                    onClick={() => handlePlatformSelect(index, plat)}
                    className="px-4 py-2 hover:bg-gray-100 cursor-pointer flex items-center gap-2"
                  >
                    <img src={plat.logo} alt={plat.name} className="w-5 h-5" />
                    <span>{plat.name}</span>
                  </div>
                ))}
              </div>
            )}
          </div>

          {/* Link Input */}
          <div>
            <label className="block text-sm text-gray-700 mb-2">Link</label>
            <div className="flex items-center bg-gray-50 border rounded-lg overflow-hidden">
              <span className="px-2 text-gray-500 text-sm">{link.baseUrl}</span>
              <input
                className="flex-1 p-2.5 outline-none text-sm"
                placeholder="your-username"
                value={link.username}
                onChange={(e) => handleUsernameChange(index, e.target.value)}
              />
            </div>
          </div>
        </div>
      ))}
      <button>save</button>
    </div>
  );
};



import {
  FieldErrors,
  UseFormHandleSubmit,
  UseFormRegister,
} from "react-hook-form";
import Cookie from "js-cookie";
import { useUserContext } from "../../contexts/UserProfileContext";
import { IoImageOutline } from "react-icons/io5";

type FormData = {
  firstName: string;
  lastName: string;
};
type ProfileDetailsProps = {
  register: UseFormRegister<FormData>;
  errors: FieldErrors<FormData>;
  handleSubmit: UseFormHandleSubmit<FormData>;
  isUpdating: boolean;
  onSubmitData: (data: FormData) => void;
};

function ProfileDetails({
  register,
  errors,
  handleSubmit,
  isUpdating,
  onSubmitData,
}: ProfileDetailsProps) {
  const { updatePhoto, photo, firstName, lastName } = useUserContext();

  const handlePhotoChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const newPhoto = event.target.files![0];

    const reader = new FileReader();
    reader.readAsDataURL(newPhoto);
    reader.onloadend = () => {
      updatePhoto(reader.result as string);
    };
  };

  const UserMail = Cookie.get("userMail");

  return (
    <div className="border-b border-solid border-[#d9d9d9] bg-white p-16 pb-0">
      <h1 className="mobile:text-[2.4rem] mobile:leading-[3.6rem] pb-[0.8rem] text-[3.2rem] font-bold leading-[4.8rem] text-[#333]">
        Profile Details
      </h1>
      <p className="text-[1.6rem] leading-[2.4rem] text-[#737373]">
        Add your details to create a personal touch to your profile.
      </p>

      <form onSubmit={handleSubmit(onSubmitData)}>
        <div className="mobile:flex-col mobile:items-stretch flex items-center justify-between gap-[1.6rem] p-8">
          <span className="w-[24rem] text-[1.6rem] leading-[2.4rem] text-[#737373]">
            Profile picture
          </span>
          <input
            type="file"
            name="image"
            id="image"
            className="hidden"
            accept="image/jpg, image/png"
            onChange={handlePhotoChange}
          />
          <div className="mobile:items-stretch mobile:flex-col flex w-full items-center gap-[2.4rem]">
            <label
              htmlFor="image"
              className={`flex w-[19.2rem] cursor-pointer flex-col items-center gap-[0.8rem] rounded-[1.2rem] bg-[#efebff] bg-cover bg-center px-12 py-24 ${photo ? "text-white" : "text-[#633cff]"}`}
              style={{
                backgroundImage: photo
                  ? `linear-gradient(0deg, rgba(0, 0, 0, 0.50) 0%, rgba(0, 0, 0, 0.50) 100%), url(${photo})`
                  : "",
              }}
            >
              <IoImageOutline size={"4rem"} />
              <span className="text-[1.6rem] font-semibold leading-[2.4rem]">
                + Upload Image
              </span>
            </label>
            <p className="mobile:w-full w-[21.5rem] text-[1.2rem] leading-[1.8rem] text-[#737373]">
              Image must be below 1024x1024px. Use PNG or JPG format.
            </p>
          </div>
        </div>